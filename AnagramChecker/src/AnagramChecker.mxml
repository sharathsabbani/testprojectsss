<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="1000" height="800">
	<mx:Script>
		<![CDATA[
			import mx.utils.SHA256;
			import mx.utils.ObjectUtil;
			import mx.collections.Sort;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.utils.StringUtil;
			import mx.controls.Alert;
			import mx.utils.Base64Encoder;
			import com.hurlant.util.der.ByteString;
			import com.hurlant.crypto.symmetric.IVMode;
			import com.hurlant.crypto.Crypto;
			import com.hurlant.crypto.symmetric.ICipher;
			import com.hurlant.crypto.symmetric.PKCS5;
			import com.hurlant.crypto.symmetric.IPad;
			import mx.core.Application;
			import com.hurlant.crypto.symmetric.AESKey;
			import com.hurlant.util.Base64;
			import com.hurlant.util.Hex;
			import com.hurlant.util.der.PEM;
			import com.hurlant.crypto.rsa.RSAKey;

			private var dictionary:ArrayCollection = new ArrayCollection();
			private var rawCollection:ArrayCollection = new ArrayCollection();
			private var strings:ArrayCollection = new ArrayCollection();
			private var anagramCount:int;

			private function readFile(filePath:String):ByteArray
			{
				var myFile:File = File.applicationDirectory.resolvePath(filePath);
				var fileStream:FileStream = new FileStream();
				fileStream.open(myFile, FileMode.READ);
				var fileBytes:ByteArray = new ByteArray();
				//var str:String = fileStream.readMultiByte(fileStream.bytesAvailable, "utf-16");
				fileStream.readBytes(fileBytes, 0, fileStream.bytesAvailable);
				//fileBytes = Base64.decodeToByteArray(fileStream.readUTFBytes(fileStream.bytesAvailable));
				//var enctext:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
				return (fileBytes);
				//return str;

			}

			public function decryptIt():String
			{

				var ex2src:ByteArray = readFile("DevHunt ActionScript Question.dhx");
				var k:String = "displayaspassword,groupname,labelfield,layout,showclosebutton";
				var key:ByteArray = Hex.toArray(Hex.fromString('displayaspassword,groupname,labelfield,layout,showclosebutton'));
				var iv:String = "how's the debugging going?";
				var pad:IPad = new PKCS5();
				var mode:ICipher = Crypto.getCipher("aes-128-cbc", key, pad);
				pad.setBlockSize(mode.getBlockSize());
				if (mode is IVMode)
				{
					var ivmode:IVMode = mode as IVMode;
					ivmode.IV = Hex.toArray(Hex.fromString(iv));
				}
				mode.decrypt(ex2src);
				return Hex.toString(Hex.fromArray(ex2src));
			}

			private function displayresult():void
			{
				var outfile:File = File.applicationStorageDirectory.resolvePath("outputfile.xml");
				inputDecodeString.text = decryptIt();
				var stream:FileStream = new FileStream();
				stream.open(outfile, FileMode.WRITE);
				stream.writeUTFBytes(decryptIt());
				stream.close();
			}

			private function getData():void
			{
				var xml:XML = new XML(inputDecodeString.text);
				var xmllist:XMLList = new XMLList(inputDecodeString.text);
				parsexml(xml);
			}


			private function parsexml(xml:XML):void
			{
				for each (var child:XML in xml.*)
				{
					for (var i:int = 0; i < child.attribute("*").length(); i++)
					{
						rawCollection.addItem(child.attribute("*")[i]);
					}
					rawCollection.addItem(child.text().toString());
					parsexml(child);
				}
			}

			private function removeDulicateEntities(ac:ArrayCollection):void
			{

				for (var i:uint = 0; i < (ac.length - 1); i++)
				{

					var item:* = ac.getItemAt(i);

					for (var j:uint = (i + 1); j < ac.length; j++)
					{
						var compareItem:* = ac.getItemAt(j);
						var result:int = ObjectUtil.compare(item, compareItem);
						if (result == 0)
						{
							ac.source.splice(j, 1);
							j -= 1;
						}
					}
				}

			}



			private function ShowArray():void
			{
				for (var i:int = 0; i < dictionary.length - 1; i++)
				{
					try
					{
						if (dictionary[i] == "" || dictionary[i] == ' ' || dictionary[i] == "''" || dictionary[i] == '' || dictionary[i] == " " || dictionary[i] == "' '")
						{
							dictionary.removeItemAt(i);
						}
						if (isNumeric(dictionary[i]) == true)
						{
							dictionary.removeItemAt(i);
						}
						if (isUrl(dictionary[i]) == true)
						{
							dictionary.removeItemAt(i);
						}
						if (isEmail(dictionary[i]) == true)
						{
							dictionary.removeItemAt(i);
						}
						if (isDate(dictionary[i]) == true)
						{
							dictionary.removeItemAt(i);
						}
						if (isXML(dictionary[i]) == true)
						{
							dictionary.removeItemAt(i);
						}
						if (String(dictionary[i]).length == 1)
						{
							dictionary.removeItemAt(i);
						}
						dictionary[i] = String(dictionary[i]).replace(",", '');
						dictionary[i] = String(dictionary[i]).replace(".", '');
						dictionary[i] = String(dictionary[i]).replace("\r\t\t\t", '');
					}
					catch (err:Error)
					{
						trace("error" + err);
					}

				}
				for (var i:int = 0; i < dictionary.length - 1; i++)
				{
					if (dictionary[i] == "" || dictionary[i] == ' ' || dictionary[i] == "''" || dictionary[i] == '' || dictionary[i] == " " || dictionary[i] == "' '")
					{
						dictionary.removeItemAt(i);
					}
				}
				removeDulicateEntities(dictionary);
			}

			private function GetRawArray():void
			{
				for (var i:int = 0; i < rawCollection.length - 1; i++)
				{
					if (rawCollection[i] == "" || rawCollection[i] == ' ' || rawCollection[i] == "''" || rawCollection[i] == '' || rawCollection[i] == " " || rawCollection[i] == "' '")
					{
						rawCollection.removeItemAt(i);
					}
					if (isNumeric(rawCollection[i]) == true)
					{
						rawCollection.removeItemAt(i);
					}
					if (isUrl(rawCollection[i]) == true)
					{
						rawCollection.removeItemAt(i);
					}
					if (isEmail(rawCollection[i]) == true)
					{
						rawCollection.removeItemAt(i);
					}
					if (isDate(rawCollection[i]) == true)
					{
						rawCollection.removeItemAt(i);
					}
					if (isXML(rawCollection[i]) == true)
					{
						rawCollection.removeItemAt(i);
					}
				}
				//removeDulicateEntities(rawCollection);
			}

			public static function isNumeric(p_string:String):Boolean
			{
				if (p_string == null)
				{
					return false;
				}
				var regx:RegExp = /^[+-]?(0|[1-9][0-9]*)?\.?[0-9]+(e[+-]?(0|[1-9][0-9]*))?$/;
				return regx.test(p_string);
			}

			public function isUrl(regString:String):Boolean
			{
				if (regString == null)
				{
					return false;
				}
				var regx:RegExp = /(((http|ftp|https):\/\/){1}([a-zA-Z0-9_-]+)(\.[a-zA-Z0-9_-]+)+([\S,:\/\.\?=a-zA-Z0-9_-]+))/igs;
				return regx.test(regString);
			}

			public function isEmail(regString:String):Boolean
			{
				if (regString == null)
				{
					return false;
				}
				var regx:RegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
				return regx.test(regString);
			}

			public function isDate(regString:String):Boolean
			{
				if (regString == null)
				{
					return false;
				}
				var regx:RegExp = /\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])/;
				return regx.test(regString);

			}

			public function isXML(regString:String):Boolean
			{
				if (regString == null)
				{
					return false;
				}
				var regx:RegExp = /^XML.com$/;
				return regx.test(regString);
			}

			public function SplitArray():void
			{
				for (var i:int = 0; i < rawCollection.length - 1; i++)
				{
					var loc:Array = new Array();
					loc = String(rawCollection[i]).split(' ');
					for (var j:int = 0; j < loc.length; j++)
					{
						dictionary.addItem(loc[j]);
					}
				}
			}

			private function CheckAnagrams():void
			{
				var source:Array = dictionary.source;
				source.sort();
				var index:int = 0;
				for (var i:int = 0; i < source.length; i++)
				{
					var string1:String = String(source[index]).toLowerCase();
					for (var j:int = i + 1; j < source.length; j++)
					{

						var string2:String = String(source[j]).toLowerCase();
						if (string1 != string2)
						{
							//trace(" String1 " + string1 + " " + "String2" + string2);
							if (areAnagrams(string1, string2))
							{
								trace("Anagrams :   " + string1 + "  " + string2);
								txtAnagrams.text += string1 + "  " + string2 + "\n";
								anagramCount = anagramCount + 1;
							}
							else if (j + 1 == source.length)
							{
								index = index + 1;
							}
						}
					}

				}
				trace(anagramCount);
				var angramCountString:String = 'twenty-four';
				var test:ByteArray = new ByteArray();
				test.writeMultiByte('twenty-four', 'utf-8');
				var param:String = mx.utils.SHA256.computeDigest(test);
				trace(param);



			}

			private function areAnagrams(string1:String, string2:String):Boolean
			{
				if (string1 == null || string1 == "")
				{
					return false;
				}
				if (string2 == null)
				{
					return false;
				}

				var copy1:String = sort(string1.toLowerCase());
				var copy2:String = sort(string2.toLowerCase());
				if (copy1 == copy2)
				{
					return true;
				}
				else
				{
					return false;
				}

			}

			private function sort(val:String):String
			{
				var len:int = val.length;
				var sorArray:Array = new Array(len);
				for (var j:int = 0; j < len; j++)
				{
					sorArray[j] = val.charAt(j);
				}
				sorArray.sort();
				var str:String = '';
				for (var i:int = 0; i < sorArray.length; i++)
					str += sorArray[i];
				return str;
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%">
		<mx:Text text="Press the buttons in the order they arranged"/>
		<mx:TextArea width="100%" height="100%" id="inputDecodeString"/>
		<mx:TextArea width="100%" height="100%" id="txtAnagrams"/>
		<mx:HBox width="100%" height="100%">
			<mx:Button label="Decode" click="displayresult()"/>
			<mx:Button label="GetData" click="getData()"/>
			<mx:Button label="GetRawArray" click="GetRawArray()"/>
			<mx:Button label="Split Spaces" click="SplitArray()"/>
			<mx:Button label="Show Strings" click="ShowArray()"/>
			<mx:Button label="Check Anagrams" click="CheckAnagrams()"/>
		</mx:HBox>


	</mx:VBox>
</mx:WindowedApplication>
